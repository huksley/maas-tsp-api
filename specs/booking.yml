openapi: 3.0.0
servers:
  - url: http://localhost:3000
    description: Local server
info:
  version: v1.1
  title: Whim TSP API
  description: >-
    This is a API specification of REST endpoints that a Transport Service
    Provider (TSP) should implement to offer their services through the 
    [Whim application](https://whimapp.com/).


    It is written in machine readable 
    [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format, 
    so that API endpoints, validators and test clients can be generated from the
    documentation.


    ## Versions

    ### v1. Initial release (2018)
      
      * [OpenAPI Specification](../specs/maas-v1.yml)
      * [Documentation](?maas-v1.yml)
      * [SwaggerUI](../swagger-ui/?urls.primaryName=maas-v1.yml)
      * Source code [repository](https://github.com/maasglobal/maas-tsp-api/tree/v1.0)

    ### v1.1 Latest version

      **under development**

      * [OpenAPI Specification](../specs/booking.json)
      * [Documentation](?booking.json)
      * [SwaggerUI](../swagger-ui/?urls.primaryName=booking.yml)
      * Source code [repository](https://github.com/maasglobal/maas-tsp-api/)

  termsOfService: "https://github.com/maasglobal/maas-tsp-api/blob/master/terms.md"
  contact:
    name: Maas Global Team
    email: tech@maas-global.fi
    url: "https://github.com/maasglobal/maas-tsp-api"
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
  x-logo:
    url: "../assets/whim-logo.png"
    backgroundColor: "#FFFFFF"
    altText: "Whim logo"
    href: "https://whimapp.com"
tags:
  - name: Booking process
    description: >-
      The following scenario explains the life-cycle of an individual trip
      from a TSP viewpoint. Whenever a new concept (such as an actor or action)
      is represented, it is imprinted in **bold**.


      This scenario, with a few extra details is detailed in the process diagram
      below. It should be noted from the picture that MaaS more often acts as a
      caller than a callee for Transport Service Provider. 


      The cases of how MaaS interacts with TSP are depicted in [business process diagram](https://cawemo.com/embed/09a7739f-f8ce-4fe4-a5e5-a8f66ecedb8c)


      <html>
        <iframe src="https://cawemo.com/embed/acc4149c-8d04-4245-a047-c7dd94b97d88" 
          style="width: 100%; height:300px; border:1px solid #ccc" allowfullscreen="allowfullscreen">
        </iframe>
      <html>


      ## Planning a Route

      **User** **queries** for a **Route** with an address or latitude-logitude
      pair from one place to another. MaaS queries the route from a third party
      **Routing Engine** that contains the data for **TSP** routes. At this point
      MaaS makes no queries to the TSP - it expects the Routing Engine contains 
      valid GTFS data for the TSP.


      **MaaS** shows several possible **Plans**, each containing a valid
      **Route** with several **Legs** with a part of a route using a specific
      TSP.


      ## Creating a Booking


      User browses through the Plans and chooses to book a trip. For each Leg
      in the Plan Route, MaaS creates a new **Booking** for a TSP.
      It should be noted that the booking may be hours or days in
      advance - a bit like in booking a hotel. The booking contains the
      individual Leg as the detailed travel plan for the TSP, as well as
      customer contact information.


      TSP receives the booking and confirms the trip. TSP may modify the details
      of the Booking, such as moving the **start location** to closest known
      street address or delaying the Leg **start time**, as long as the
      **end time** can be guaranteed. The Booking is supplemented with
      **booked** state information and additional **terms** latest such as
      the latest **cancellation time**.


      MaaS checks that the booking succeeded and stores the Booking for future
      reference.


      ## Navigating a Route

      User starts to navigate the Route. MaaS tracks for the user location to
      know if there are any changes needed in the plan. MaaS triggers the changes
      for bookings by monitoring the individual Legs.


      MaaS monitors the Booking terms and Leg **start time**.
      When the actual Leg starts, MaaS **starts** the Leg and notifies the TSP.
      User or TSP may request changes to the Booking, e.g. in a case of a delay
      or cancellation.


      Each of these scenarios are described below.


      ## Updating a Booking


      A Booking may be updated by a User, MaaS or TSP when any party receives
      new information that the Leg needs to be changed. Since the update may need
      confirmation from User or a 3rd party system, it is an asynchronous
      operation.


      Either party (MaaS or TSP) may send an updated Booking with
      **UPDATE_REQUESTED** state. The recipient processes the request
      asynchronously and either confirms the request with **UPDATED** state,
      sends its proposal with **UPDATE_REQUESTED**, or cancels the leg with
      **CANCELLED** state.

      ## Cancelling a Booking


      A Booking may be cancelled by User or MaaS within **cancellation time** in
      **terms** of the Booking without a specific request. MaaS sends a modified
      Booking with state **CANCELLED** information. TSP confirms and updates its
      own systems.


      It should be noted that cancellation is an exception case and is likely
      happen only when the user chooses to cancel the whole route Plan.
      Instead, MaaS and/or TSP should update the booking with new information.

      TSP can assume Booking as paid if the cancellation time has passed and no
      cancellation has been received from MaaS.

      ## Paying a Booking

      A Booking may be paid (e.g. confirmed) before the **cancellation time**
      in **terms** has expired. MaaS sends a modified Booking with **PAID**
      state wich the TSP confirms.

      TSP can assume Booking as paid if the cancellation time has passed and no
      cancellation has been received from MaaS.


      ## Error Cases


      It may be possible that MaaS sends an invalid request or the TSP cannot
      fulfill a request. In any such case, TSP may respond with an error. If
      TSP responds with an error, MaaS assumes the state was not changed (e.g.
      a transaction was rolled back). MaaS may repeat the request
      with the same or different data later on.


      The same principle applies when TSP is communicating with MaaS.
    x-traitTag: true
  - name: Booking
    description: >-
      Booking related APIs are the core of a TSP implementation.

      Correspondingly, a Booking is the main object exchanged between MaaS and a
      TSP.
    x-traitTag: false
    x-displayName: Booking API

components:
  securitySchemes:
    apiKeyHeader:
      in: header
      name: X-API-Key
      type: apiKey
      description: >-
        Authorization scheme to use with TSP API should be based on specifying `X-API-Key`
        header when Whim App makes request to the TSP API.


        Please not what due to serverless nature of our infrastructure we are unable to provide
        you with a set of IP addresses HTTP request will be originating from.


        To cope with that we propose using *optional* JSON payload signing, see here for more 
        information: https://developer.github.com/webhooks/securing/#validating-payloads-from-github
security:
  - apiKeyHeader: []
paths:
  /bookings/options:
    get:
      operationId: bookingOptionsGet
      summary: Available transport options
      description: >-
        Returns available transport options or offers.
        Start time can be defined, but is optional. If startTime is not provided, but
        required by the third party API, a default value of "Date.now()" is
        used.
      tags:
        - Booking
      parameters:
        - name: from
          description: "User's location in comma separated form e.g. 60.123,27.456"
          in: query
          required: true
          schema:
            $ref: ../schemas/core/components/units-geo.json#/definitions/shortLocationString
        - name: to
          description: "A desired destination e.g. 60.123,27.456"
          in: query
          required: false
          schema:
            $ref: ../schemas/core/components/units-geo.json#/definitions/shortLocationString
      x-code-samples:
        - lang: Shell
          label: Query for taxi
          source: >-
            curl --location --request GET 'http://localhost:3000/bookings/options? \
              customer[clientId]=whim&customer[locale]=en& \
              customer[opaqueId]=deadbeef-deadbeef& \
              customer[phone]=+35840000000& \
              distance=9734&endTime=1572347575000& \
              from=60.1769789,24.9504135& \
              fromAddress=streetName:Siltasaarenkatu|streetNumber:1|city:Helsinki|zipCode:00530|country:Suomi&fromName=Siltasaarenkatu%201%20Helsinki& \
              mode=TAXI& \
              startTime=1572347575000& \
              to=60.23044350000001,24.8990183& \
              toAddress=streetName:Ida%20Aalbergin%20tie|streetNumber:3|city:Helsinki|zipCode:00400|country:Suomi& \
              toName=Ida%20Aalbergin%20tie%203%20Helsinki' \
                --header "x-api-key: pieY8Oezeicioyei5eisheeb7sheeLie"
      responses:
        "200":
          x-summary: Array of options
          description: >-
            Available transport methods matching the given query parameters. If
            no transport methods are available, an empty array is returned.
          content:
            application/json:
              schema:
                $ref: ../schemas/tsp/booking-options-list/response.json
              examples:
                Taxi:
                  summary: Taxi
                  externalValue: "../examples/taxi/booking-options-response.json"
  /bookings/{tspId}:
    get:
      operationId: bookingGet
      summary: Get booking
      description: Returns the Booking that has been created earlier
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        "200":
          description: The bookings matching the query
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
        "400":
          description: Bad request (invalid query parameters)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        "401":
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
    patch:
      operationId: bookingUpdate
      summary: Update booking
      description: Update booking if it is possible
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        "200":
          description: Updated, old booking returned
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
        "204":
          description: Updated, no content returned
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        "401":
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
    delete:
      operationId: bookingDelete
      summary: Delete booking
      description: Deletes booking if it is possible
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        "200":
          description: Deleted, old booking returned
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
        "204":
          description: Deleted, no content returned
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        "401":
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
  /bookings:
    post:
      operationId: bookingCreate
      summary: Create booking
      description: >-
        Creates a new `Booking` for the TSP in **booked** state. The returned
        object will be a refrence that is passed back & forth throughout the
        booking life cycle.

        The Booking may be modified in the response, e.g. location being
        adjusted for a more suitable pick-up location.

        In addition, the service may contain a **meta** attribute for arbitrary
        TSP metadata that the TSP needs later, and **token** attribute depicting
        how long the current state is valid.

        ### JSON Schema documentation

        Full schema documented here: 
        https://maasglobal.github.io/maas-schemas/docs/tsp/booking-create/request.html
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/tsp/booking-create/request.json
            examples:
              taxi:
                summary: Taxi
                externalValue: ../examples/taxi/booking-create-request.json
        description: >-
          Parameters of booking to be created, optionally referencing 
          offerId returned on the `/bookings/options` call.
        required: true
      responses:
        "200":
          x-summary: Booking
          description: >-
            Booking information
          content:
            application/json:
              schema:
                $ref: ../schemas/tsp/booking-create/response.json
              examples:
                Taxi:
                  summary: Taxi
                  externalValue: ../examples/taxi/booking-create-response.json
  /bookings/{tspId}/receipt:
    get:
      operationId: bookingGetReceipt
      summary: Get final booking receipt
      description: Get finalized pricing and receipt for booking
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        "200":
          description: The bookings matching the query
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
        "400":
          description: Bad request (invalid query parameters)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        "401":
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        "404":
          description: Receipt not ready
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
